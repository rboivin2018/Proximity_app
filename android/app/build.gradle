apply plugin: "com.android.application"
apply plugin: "com.facebook.react"

import com.android.build.OutputFile

/**
 * This is the configuration block to customize your React Native Android app.
  */
  react {
      /* Folders */
          //   The root of your project, i.e. where "package.json" lives. Default is '..'
	      root = file("../")
	          //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
		      reactNativeDir = file("../node_modules/react-native")
		          //   The folder where the react-native Codegen package is. Default is ../node_modules/react-native-codegen
			      codegenDir = file("../node_modules/react-native-codegen")
			          //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
				      cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
        //   The list of variants to that are debuggable. For those we're going to
	    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
	        //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
		    debuggableVariants = ["debug"]
		    }

/**
 * Set this to true to create four separate APKs instead of one,
  * one for each native architecture. This is useful if you don't
   * use App Bundles (https://developer.android.com/guide/app-bundle/)
    * and want to have separate APKs to upload to the Play Store.
     */
     def enableSeparateBuildPerCPUArchitecture = false

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
  */
  def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore (JSC)
  *
   * For example, to use the international variant, you can use:
    * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
     */
     def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Private function to get the list of Native Architectures you want to build.
  * This reads the value from reactNativeArchitectures in your gradle.properties file.
   */
   def reactNativeArchitectures() {
       def value = project.getProperties().get("reactNativeArchitectures")
           return value ? value.split(",") : ["armeabi-v7a", "arm64-v8a", "x86", "x86_64"]
	   }

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace "com.proximitymatch"
        defaultConfig {
	        applicationId "com.proximitymatch"
		        minSdkVersion rootProject.ext.minSdkVersion
			        targetSdkVersion rootProject.ext.targetSdkVersion
				        versionCode 1
					        versionName "1.0.0"

        // Enable Bluetooth permissions automatically
	        missingDimensionStrategy 'react-native-camera', 'general'
		    }

    signingConfigs {
            debug {
	                storeFile file('debug.keystore')
			            storePassword 'android'
				                keyAlias 'androiddebugkey'
						            keyPassword 'android'
							            }
								            release {
									                if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
											                storeFile file(MYAPP_UPLOAD_STORE_FILE)
													                storePassword MYAPP_UPLOAD_STORE_PASSWORD
															                keyAlias MYAPP_UPLOAD_KEY_ALIAS
																	                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
																			            }
																				            }
																					        }

    buildTypes {
            debug {
	                signingConfig signingConfigs.debug
			        }
				        release {
					            // Caution! In production, you need to generate your own keystore file.
						                // see https://reactnative.dev/docs/signed-apk-android.
								            signingConfig signingConfigs.release
									                minifyEnabled enableProguardInReleaseBuilds
											            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
												            }
													        }

    // applicationVariants are e.g. debug, release
        applicationVariants.all { variant ->
	        variant.outputs.each { output ->
		            // For each separate APK per architecture, set a unique version code as described here:
			                // https://developer.android.com/studio/build/configure-apk-splits.html
					            // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1